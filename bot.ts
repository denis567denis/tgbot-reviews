import { Telegraf, Markup } from 'telegraf';
import * as dotenv from 'dotenv';
import { updateDailyStats } from './services/statisticForDay.service';
import { updateActiveUserOrCreateUser } from './services/analiticsUsers';
import { getComments, addReview } from './services/data.service';
import { AnalyticsUsersModel } from './models/AnaliticsUsersModel';

dotenv.config();

const bot = new Telegraf(process.env.API_BOT!);

const userSkipState: { [userId: number]: { skip: number; salesmanName: string } } = {};

function formatDate(date: Date): string {
  const options: Intl.DateTimeFormatOptions = {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  };
  return new Intl.DateTimeFormat('ru-RU', options).format(date);
}

function findSalesmanName(text: string) {
  const salesman = text.match(/@\w+/g);
  return salesman ? salesman : false;
}

function isForwardedMessage(message: any): message is { forward_date: number } {
  return 'forward_date' in message;
}

function getMessageText(message: any): string | undefined {
  if ('text' in message) {
    return message.text;
  } else if ('caption' in message) {
    return message.caption;
  }
  return undefined;
}

function extractUsernameFromLink(text: string): string | null {
  const match = text.match(/https:\/\/t\.me\/\w+_bot\/(@\w+)/);
  return match ? match[1] : null;
}

async function sendComments(ctx: any, comments: any[]) {
  for (const item of comments) {
    const formattedDate = formatDate(item.createdAt);
    const message = `üìÖ –î–∞—Ç–∞: ${formattedDate}\nüë§ –ê–≤—Ç–æ—Ä: ${item.nameTg}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${item.message}`;
    await ctx.reply(message);
  }
}

async function handleCommentsRequest(ctx: any, userId: number, salesmanName: string) {
  try {
    if (userSkipState[userId] && userSkipState[userId].salesmanName !== salesmanName) {
      delete userSkipState[userId];
    }

    if (!userSkipState[userId]) {
      userSkipState[userId] = { skip: 0, salesmanName };
    }

    const comments = await getComments(salesmanName, userSkipState[userId].skip, 5);

    const keybord2 = Markup.keyboard([
      Markup.button.webApp('‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',`${process.env.HOST}/reviews/`),
    ]).resize();

    if (comments.length === 0) {
      return ctx.reply('–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤—ã–±—Ä–∞–≤ –∫–Ω–æ–ø–∫—É',keybord2);
    }

    await sendComments(ctx, comments);

    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('–ï—â–µ 5', 'next_5'),
    ]);

    await ctx.reply('–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤?', keyboard);
    await ctx.reply('‚úçÔ∏è –ò–ª–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ –ø—Ä–æ–¥–æ–≤—Ü—É', keybord2);
  } catch (err) {
    console.error('Error fetching comments:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
  }
}

bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  const startPayload = ctx.message.text.split(' ')[1];

  if (startPayload) {
    const salesmanName = `@${startPayload}`;
    await handleCommentsRequest(ctx, userId, salesmanName);
    await updateDailyStats(userId.toString());
    await updateActiveUserOrCreateUser(userId, ctx.from.first_name, ctx.from.last_name || '', ctx.from.username || '');
  } else {
    try {
      const welcomeMessage = 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º –ø—Ä–æ–¥–∞–≤—Ü–∞.';
      await ctx.reply(welcomeMessage,  Markup.keyboard([
          Markup.button.webApp('‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',`${process.env.HOST}/reviews/`),
        ]).resize()
      );
    } catch (error: any) {
      if(error.response && error.response.error_code === 403) {
        await AnalyticsUsersModel.deleteOne({idTg: `${ctx.from.id}`});
      }
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);

    }
  }
});

bot.hears('–û –±–æ—Ç–µ', async (ctx) => {
  const aboutMessage = `
ü§ñ *–û –±–æ—Ç–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ <@–∏–º—è> –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞.
  `;
  await ctx.reply(aboutMessage, { parse_mode: 'Markdown'  });
});

bot.hears('–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', async (ctx) => {
  const addReviewMessage = `
‚úçÔ∏è *–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:*
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_review <@–∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞> <–≤–∞—à –æ—Ç–∑—ã–≤>.
–ü—Ä–∏–º–µ—Ä: /add_review @example_user –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!
  `;
  await ctx.reply(addReviewMessage);
});

bot.command('info', async (ctx) => {
  const aboutMessage = `
ü§ñ *–û –±–æ—Ç–µ:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ <@–∏–º—è> –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞.
  `;
  await ctx.reply(aboutMessage, { parse_mode: 'Markdown'  });
});

bot.command('add_review', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –≤–∞—à –æ—Ç–∑—ã–≤.');
  }
  const salesmanName = args[0];
  const reviewText = args.slice(1).join(' ');
  const userId = ctx.from.id;

  try {
    if(userId) {
      await addReview(salesmanName, userId, reviewText, ctx.from.username || ctx.from.first_name);
      await updateDailyStats(userId.toString());
      await updateActiveUserOrCreateUser(userId, ctx.from.first_name, ctx.from.last_name || '', ctx.from.username || '');
      await ctx.reply('–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
  } catch (err) {
    console.error('Error adding review:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.');
  }
});

bot.on('message', async (ctx) => {
  const message = ctx.message;
  const userId = ctx.from.id;

  if (userId) {
    await updateDailyStats(userId.toString());
    await updateActiveUserOrCreateUser(userId, ctx.from.first_name, ctx.from.last_name || '', ctx.from.username || '');
  }

  if (isForwardedMessage(message)) {
    const postText = getMessageText(message);

    if (!postText) {
      return ctx.reply('–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏.');
    }

    const salesmanNames = findSalesmanName(postText);

    if (!salesmanNames) {
      return ctx.reply('–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.');
    }

    try {
      for (const salesmanName of salesmanNames) {
        const comments = await getComments(salesmanName, 0, 5);

        if (comments.length === 0) {
          await ctx.reply(`–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ${salesmanName}.`);
          continue;
        }
        await sendComments(ctx, comments);
      }
    } catch (err) {
      console.error('Error fetching comments:', err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.');
    }
  } else if ('text' in message) {
    const text = message.text.trim();

    const usernameFromLink = extractUsernameFromLink(text);

    if (usernameFromLink) {
      await handleCommentsRequest(ctx, userId, usernameFromLink);
    } else {
      const salesmanName = text;

      if (!salesmanName) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ —Å—Å—ã–ª–∫—É.');
      }

      await handleCommentsRequest(ctx, userId, salesmanName);
    }
  } else {
    return ctx.reply('–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  }
});

bot.action('next_5', async (ctx) => {
  const userId = ctx.from.id;

  if (!userSkipState[userId]) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.');
  }

  if (userId) {
    await updateDailyStats(userId.toString());
    await updateActiveUserOrCreateUser(userId, ctx.from.first_name, ctx.from.last_name || '', ctx.from.username || '');
  }

  userSkipState[userId].skip += 5;
  await handleCommentsRequest(ctx, userId, userSkipState[userId].salesmanName);
});

process.on('SIGINT', () => {
  bot.stop('SIGINT');
  console.log('Bot stopped.');
});

process.on('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('Bot stopped.');
});

export default bot;